*از چت جی پی تی استفاده شده برای توضیحات*


توضیحات کد Python (app.py)
این کد یک وب سرویس ساده با استفاده از فریم‌ورک Flask ایجاد می‌کند که به ما امکان می‌دهد فایل‌ها را آپلود کرده و پردازش کنیم.

وارد کردن کتابخانه‌های مورد نیاز
python
Copy code
from flask import Flask, request, jsonify
import os
Flask: برای ایجاد یک وب سرویس استفاده می‌شود.
request: برای دسترسی به داده‌های درخواست HTTP استفاده می‌شود.
jsonify: برای تبدیل داده‌ها به فرمت JSON جهت ارسال به کلاینت استفاده می‌شود.
os: برای کار با سیستم فایل استفاده می‌شود.
ایجاد یک نمونه از کلاس Flask
python
Copy code
app = Flask(__name__)
یک نمونه از Flask ایجاد می‌کند که به عنوان اپلیکیشن وب عمل می‌کند.
تنظیمات مسیر پوشه آپلود
python
Copy code
UPLOAD_FOLDER = 'uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
UPLOAD_FOLDER: مسیری که فایل‌های آپلود شده در آن ذخیره می‌شوند.
app.config['UPLOAD_FOLDER']: تنظیمات اپلیکیشن Flask برای استفاده از مسیر مشخص شده.
بررسی وجود پوشه آپلود و ایجاد آن در صورت عدم وجود
python
Copy code
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
اگر پوشه آپلود وجود نداشته باشد، با استفاده از os.makedirs آن را ایجاد می‌کند.
تعریف روت برای آپلود فایل
python
Copy code
@app.route('/upload', methods=['POST'])
def upload_file():
یک روت /upload تعریف می‌کند که فقط به درخواست‌های POST پاسخ می‌دهد.
تابع upload_file برای پردازش فایل‌های آپلود شده استفاده می‌شود.
بررسی وجود فایل در درخواست
python
Copy code
if 'file' not in request.files:
    return jsonify({'error': 'No file part'}), 400
بررسی می‌کند که آیا فایل در درخواست ارسال شده است یا خیر.
اگر فایل وجود نداشته باشد، یک پیام خطا در قالب JSON برمی‌گرداند.
دسترسی به فایل آپلود شده
python
Copy code
file = request.files['file']
فایل آپلود شده را از درخواست دریافت می‌کند.
بررسی نام فایل
python
Copy code
if file.filename == '':
    return jsonify({'error': 'No selected file'}), 400
بررسی می‌کند که آیا فایل انتخاب شده نامی دارد یا خیر.
اگر نام فایل خالی باشد، یک پیام خطا در قالب JSON برمی‌گرداند.
ذخیره فایل در مسیر مشخص شده
python
Copy code
if file:
    filename = file.filename
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    file.save(filepath)
اگر فایل وجود داشته باشد، نام فایل را دریافت می‌کند.
مسیر کامل فایل را با استفاده از os.path.join ایجاد می‌کند.
فایل را در مسیر مشخص شده ذخیره می‌کند.
بازگشت نتیجه پردازش
python
Copy code
result = f"File {filename} has been processed."
return jsonify({'result': result, 'filename': filename})
یک پیام موفقیت با نام فایل و نتیجه پردازش ایجاد می‌کند.
پاسخ را در قالب JSON برمی‌گرداند.
اجرای اپلیکیشن
python
Copy code
if __name__ == '__main__':
    app.run(debug=True)
اگر اسکریپت مستقیماً اجرا شود، سرور Flask را در حالت debug اجرا می‌کند.
توضیحات کد PHP (upload.php)
این کد یک فرم HTML برای آپلود فایل ایجاد می‌کند و فایل آپلود شده را به وب سرویس پایتون ارسال می‌کند و پاسخ را دریافت و نمایش می‌دهد.

ساختار HTML
php
Copy code
<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>آپلود فایل</title>
    <style>
        /* استایل‌ها ... */
    </style>
</head>
<body>
    <div class="container">
        <h1>آپلود فایل</h1> 
ساختار اصلی HTML شامل تگ‌های استاندارد و استایل‌های CSS برای فرم.
بخش PHP برای پردازش آپلود فایل
php
Copy code
<?php
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_FILES['uploaded_file'])) {
    $file_tmp = $_FILES['uploaded_file']['tmp_name'];
    $file_name = $_FILES['uploaded_file']['name'];

    // آدرس وب سرویس پایتون
    $url = 'http://localhost:5000/upload';

    // تنظیمات cURL
    $ch = curl_init($url);
    $cfile = new CURLFile($file_tmp, $_FILES['uploaded_file']['type'], $file_name);
    $data = array('file' => $cfile);

    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);

    // ارسال درخواست و دریافت پاسخ
    $response = curl_exec($ch);
    curl_close($ch);

    // نمایش پاسخ
    $result = json_decode($response, true);
    if (isset($result['result']) && isset($result['filename'])) {
        echo "<div class='message success'>{$result['result']}</div>";
        echo "<div class='message'>نام فایل: {$result['filename']}</div>";
    } else {
        echo "<div class='message'>خطا در آپلود فایل.</div>";
    }
}
?>
اگر درخواست به صورت POST باشد و فایل آپلود شده موجود باشد، فایل را به وب سرویس پایتون ارسال می‌کند.
از cURL برای ارسال درخواست POST به وب سرویس پایتون استفاده می‌کند.
پاسخ وب سرویس را دریافت و در قالب JSON دیکد می‌کند.
نتیجه را به صورت پیام موفقیت یا خطا در صفحه نمایش می‌دهد.
فرم HTML برای آپلود فایل
php
Copy code
<a class="back-link" href="http://localhost/swiming%20projet/ap/admin_dashboard.php">بازگشت به صفحه اصلی</a> <!-- لینک بازگشت به صفحه اصلی -->
<form action="" method="POST" enctype="multipart/form-data">
    <input type="file" name="uploaded_file" required> <!-- ورودی انتخاب فایل -->
    <input type="submit" value="آپلود"> <!-- دکمه ارسال -->
</form>

<!-- دیو متن -->
<div class="info-text">
    این یک متن نمونه است که زیر فرم قرار داده شده است.
</div>
فرم HTML شامل ورودی فایل و دکمه ارسال است.
لینک بازگشت به صفحه اصلی و یک دیو متن نمونه برای نمایش زیر فرم.
این توضیحات کامل، هر خط از کدهای پایتون و PHP را به طور دقیق پوشش می‌دهد و عملکرد آن‌ها را توضیح می‌دهد.
